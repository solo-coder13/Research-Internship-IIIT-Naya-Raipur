# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13y9B-I8ACK_5fCUgXJlTprGIDD1PmGc6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import keras

ds = pd.read_csv('sample_data/california_housing_train.csv')
ds.head()

ds.describe()

ds_arr = np.array(ds)
print(ds_arr.shape)
X = ds_arr[:, :8]
y = ds_arr[:, 8:]
print(X.shape, y.shape)

model = keras.Sequential([keras.layers.Dense(1, activation='linear', input_shape=(8,))])
model.summary()

model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=10)

"""create neural model"""

model = keras.Sequential()
model.add(keras.layers.Dense(6, activation='relu', input_shape=(1,)))
model.add(keras.layers.Dense(1))
model.summary()

model.compile(loss='mse', optimizer='adam')

import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

X = np.linspace(-3, 3, 20)[:, np.newaxis]
y = np.sin(X)
print(X.shape, y.shape)

plt.figure()
plt.plot(X, y, 'rx')
plt.show()

model = keras.Sequential()
model.add(keras.layers.Dense(6, activation='relu', input_shape=(1,)))
model.add(keras.layers.Dense(1))
model.summary()

model.compile(loss='mse', optimizer='adam')

model.fit(X, y, epochs=1000)

outputs = model.predict(X)
plt.figure()
plt.plot(X, y, 'rx', X, outputs, 'b--o')
plt.show()

ds = pd.read_csv('sample_data/california_housing_train.csv')
ds.head()

ds.describe()

mean = ds.mean()
std = ds.std()
normalized_ds = (ds - mean) / std
print(normalized_ds.std())

normalized_ds.describe()

normalized_ds_arr = np.array(normalized_ds)
print(normalized_ds_arr.shape)
X = normalized_ds_arr[:, :8]
y = normalized_ds_arr[:, 8:]
print(X.shape, y.shape)

model = keras.Sequential()
model.add(keras.layers.Dense(16, activation='sigmoid', input_shape=(8,)))
model.add(keras.layers.Dense(1))
model.summary()

model.compile(loss = 'mse', optimizer='adam')

model.fit(X, y, epochs=50)

for i in range(20):
  print(f'No {i+1}: \t Target: {(y[i, 0]*std[-1])+mean[-1]}, \t Output: {model.predict(X[i:i+1, :])*std[-1] + mean[-1]}')